
#Liberias/Css/Arhivos/Data
import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px  


file_path = "../data/cliente_bi.csv"
df = pd.read_csv(file_path)

def load_css(file_path="styles.css"):
    with open(file_path, "r") as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)


load_css()
color_palette = ["#1F4E79", "#1F77B4", "#4A90E2", "#76A9FA"]
# ---Pesta√±a 1: Explicaci√≥n del CLV--

st.title("üîç Customer Lifetime Value (CLV)")

## Introducci√≥n al Proyecto
st.write("""
En este proyecto, analizamos datos de una empresa automovil√≠stica para estudiar el valor de los clientes a futuro. Nuestro objetivo es calcular el CLV (Customer Lifetime Value) a 5 a√±os y evaluar c√≥mo contribuyen los clientes a la rentabilidad de la empresa.

El **Customer Lifetime Value (CLV)** es una m√©trica que estima los ingresos netos que un cliente generar√° durante su relaci√≥n con la empresa. Comprender esta m√©trica permite optimizar estrategias de fidelizaci√≥n y segmentaci√≥n de clientes.

 - Un CLV alto indica que un cliente genera muchos ingresos y es rentable
 - CLV bajo o negativo puede significar que el cliente no genera ganancias o incluso que la empresa esta perdiendo dinero con √©l.
""")

## C√°lculo del CLV a 5 A√±os
st.subheader("F√≥rmula del CLV a 5 a√±os")
st.latex(r"""
CLV_{5\_anos} = Margen\_eur\_Medio \times \sum_{t=1}^{5} \frac{ Retenci√≥n^t }{(1+i)^t}
""")

st.write("""
Donde:
- **Retenci√≥n** ‚Üí Probabilidad de que el cliente contin√∫e comprando en el tiempo.
- **Margen_eur_Medio** ‚ÜíBeneficio neto por cliente, calculado como la diferencia entre los ingresos generados por el cliente y los costes asociados a su adquisici√≥n y mantenimiento.
- **i = 7%** ‚Üí Tasa de descuento aplicada para ajustar el valor del dinero en el tiempo.


""")

## Conclusiones Clave
st.subheader("Conclusiones Clave")

data = {
    "Cliente": ["A", "B", "C", "D"],
    "Margen(‚Ç¨)": [1000, 500, 700, -300],
    "Retenci√≥n(%)": [0.95, 0.50, 0.00, 0.75],
    "CLV 1 A√±o (‚Ç¨)": [950, 250, 0, -225],
    "Explicaci√≥n": [
        "Cliente muy rentable",
        "Cliente rentable pero con menor fidelidad",
        "No genera beneficios a futuro",
        "Genera p√©rdidas"
    ]
}

df_escenarios = pd.DataFrame(data)

st.markdown(df_escenarios.to_html(index=False), unsafe_allow_html=True)


st.markdown("<br><br>", unsafe_allow_html=True)
st.markdown("**Relevancia de la Retenci√≥n**", unsafe_allow_html=True)

st.write("""
         
 **Alta Retenci√≥n:** Un cliente con alta retenci√≥n seguir√° siendo rentable a largo plazo, incluso si su margen es moderado.

**Retenci√≥n 0:** Si la retenci√≥n es cero, el cliente dejar√° de generar ingresos en el futuro, sin importar su margen actual.

**Retenci√≥n Alta pero Margen Negativo:** Cuando la retenci√≥n es alta pero el margen es negativo, el cliente continuar√° generando p√©rdidas con el tiempo.
""")

st.markdown("""
### An√°lisis de la Influencia de las Variables en la Tasa de Abandono (Churn)

Para predecir la probabilidad  de abandono por cliente, analizamos qu√© variables tienen mayor influencia sobre esta. Esto lo representamos a trav√©s de una **matriz de correlaci√≥n**, la cual muestra c√≥mo cada variable se relaciona con el Churn .  

üí° Para este an√°lisis, te sugerimos probar con las variables: **Edad_Media_Coche, PVP_Medio, RENTA_MEDIA_ESTIMADA, Km_Medio_por_Revision**.  

""")
#Para adaptar matriz
with st.expander("Selecciona las variables para la matriz de correlaci√≥n"):
    variables_disponibles = ["Edad_Media_Coche", "PVP_Medio", 'RENTA_MEDIA_ESTIMADA',"Numero_Veces_Lead","Total_Quejas",'Km_Medio_por_Revision',"churn_medio_estimado"]
    variables_seleccionadas = st.multiselect("Elige las variables:", variables_disponibles, default=variables_disponibles)

df_selected = df[variables_seleccionadas]
for col in df_selected.columns:
    df_selected[col] = pd.to_numeric(df_selected[col], errors="coerce")

# Calcular la matriz de correlaci√≥n
corr_matrix = df_selected.corr()
fig, ax = plt.subplots(figsize=(6, 5))
sns.heatmap(corr_matrix, annot=True, cmap="Blues", fmt=".2f", linewidths=0.5, ax=ax)
st.pyplot(fig)

st.markdown("<br><br>", unsafe_allow_html=True)

# Intepretaci√≥n Matriz Correlaci√≥n
st.markdown("""
#### Interpretaci√≥n de la Matriz de Correlaci√≥n
""")

data_corr = {
    "Variable": ["Edad_Media_Coche", "PVP_Medio", "RENTA_MEDIA_ESTIMADA", "Km_Medio_por_Revision"],
    "Coeficiente": [0.47, -0.14, -0.21, -0.52],
    "Interpretaci√≥n": [
        "Mayor antig√ºedad del coche, mayor probabilidad de abandono.",
        "Precio medio m√°s alto, menor churn, pero relaci√≥n d√©bil.",
        "Mayor renta, menor tasa de abandono.",
        "M√°s kil√≥metros por revisi√≥n, menor churn, clientes comprometidos."
    ]
}

df_corr = pd.DataFrame(data_corr)
table_html = df_corr.to_html(index=False, classes="styled-table")
st.markdown(table_html, unsafe_allow_html=True)

# An√°lisis a fondo variable + influyentes
variables_importantes = ["Edad_Media_Coche", "PVP_Medio", "RENTA_MEDIA_ESTIMADA", "Km_Medio_por_Revision"]

st.markdown("<br><br>", unsafe_allow_html=True)
st.markdown("#### Distribuci√≥n de Variables Clave")

col1, col2 = st.columns(2)


for i, variable in enumerate(variables_importantes):
    # Ajustar bins en Km_Medio_por_Revision
    bins = 30 if variable != "Km_Medio_por_Revision" else 50  # Aumentar bins para mejor distribuci√≥n
    
    fig = px.histogram(
        df, x=variable, nbins=bins, 
        color_discrete_sequence=[color_palette[i]], 
        title=f"Distribuci√≥n de {variable}"
    )
    
    if variable in ["RENTA_MEDIA_ESTIMADA", "Km_Medio_por_Revision"]:
        fig.update_xaxes(tickformat=",")  

    fig.update_layout(
        xaxis_title=variable,
        yaxis_title="Frecuencia",
        bargap=0.1
    )
    if i % 2 == 0:
        with col1:
            st.plotly_chart(fig, use_container_width=True)
    else:
        with col2:
            st.plotly_chart(fig, use_container_width=True)

# Asegurar que las variables sean num√©ricas
df["churn_medio_estimado"] = pd.to_numeric(df["churn_medio_estimado"], errors="coerce")
df["retencion"] = pd.to_numeric(df["retencion"], errors="coerce")
df["CLV_5_anos"] = pd.to_numeric(df["CLV_5_anos"], errors="coerce")
df["Margen_eur_Medio"] = pd.to_numeric(df["Margen_eur_Medio"], errors="coerce")

### üìå 1Ô∏è‚É£ Scatter Plot Interactivo - Distribuci√≥n de Churn ###
import plotly.figure_factory as ff
import streamlit as st

st.subheader("üìä Distribuci√≥n de Churn - Estimaci√≥n de Densidad (KDE Interactivo)")

# Extraer datos
churn_values = df["churn_medio_estimado"].dropna().values  # Aseguramos que no haya nulos

# Crear KDE con Plotly
fig_kde = ff.create_distplot(
    [churn_values], 
    group_labels=["Churn Estimado"], 
    show_hist=False,  # No queremos histogramas, solo la curva KDE
    colors=["#1F4E79"]
)

# Ajustar t√≠tulo y ejes
fig_kde.update_layout(
    title="Distribuci√≥n de Churn en Clientes",
    xaxis_title="Churn Estimado",
    yaxis_title="Densidad"
)

# Mostrar gr√°fico en Streamlit
st.plotly_chart(fig_kde)

### üìå 2Ô∏è‚É£ Gr√°fico de Barras - Clientes Retenidos vs. En Riesgo ###
st.subheader("üìä Segmentaci√≥n de Clientes seg√∫n Churn")

# Calcular la cantidad de clientes retenidos y en riesgo
retenidos = df[df["churn_medio_estimado"] <= 0.5].shape[0]
riesgo = df[df["churn_medio_estimado"] > 0.5].shape[0]

fig_barras_churn = px.bar(
    x=["Clientes Retenidos", "Clientes en Riesgo"], 
    y=[retenidos, riesgo],
    color=["Clientes Retenidos", "Clientes en Riesgo"],
    color_discrete_map={"Clientes Retenidos": "#1F4E79", "Clientes en Riesgo": "#D62728"}
)
fig_barras_churn.update_layout(title="Comparaci√≥n de Clientes seg√∫n Churn", xaxis_title="", yaxis_title="Cantidad de Clientes")
st.plotly_chart(fig_barras_churn)

### üìå 3Ô∏è‚É£ Gr√°fico de Barras - Clasificaci√≥n de Clientes seg√∫n CLV ###
st.subheader("üìä Clasificaci√≥n de Clientes seg√∫n CLV")

# Clasificar clientes seg√∫n su CLV
clientes_perdida = df[df["CLV_5_anos"] < 0].shape[0]
clientes_equilibrio = df[(df["CLV_5_anos"] >= 0) & (df["CLV_5_anos"] <= df["Margen_eur_Medio"])].shape[0]
clientes_rentables = df[df["CLV_5_anos"] > df["Margen_eur_Medio"]].shape[0]

fig_barras_clv = px.bar(
    x=["Clientes en P√©rdida", "Clientes en Equilibrio", "Clientes Rentables"], 
    y=[clientes_perdida, clientes_equilibrio, clientes_rentables],
    color=["Clientes en P√©rdida", "Clientes en Equilibrio", "Clientes Rentables"],
    color_discrete_map={
        "Clientes en P√©rdida": "#D62728",  
        "Clientes en Equilibrio": "#FFB800",  
        "Clientes Rentables": "#1F4E79"
    }
)
fig_barras_clv.update_layout(title="Clasificaci√≥n de Clientes seg√∫n CLV", xaxis_title="", yaxis_title="Cantidad de Clientes")
st.plotly_chart(fig_barras_clv)
